/* import React, { useEffect, useState } from 'react';
import axios from 'axios';
import ProductCard from './components/ProductCard';
import Pagination from './components/Pagination';
import Filters from './components/Filters';
import Cart from './components/Cart';
import './styles.css';

const PRODUCTS_API = "https://mocki.io/v1/10512a17-105f-435d-a920-dce1478345bd";

const App = () => {
  const [products, setProducts] = useState([]);
  const [search, setSearch] = useState('');
  const [sortOrder, setSortOrder] = useState('asc');
  const [filters, setFilters] = useState({ color: [], brand: [] });
  const [cartItems, setCartItems] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);

  const PRODUCTS_PER_PAGE = 5;
  const MAX_ITEMS = 20;

  useEffect(() => {
    axios.get(PRODUCTS_API)
      .then(res => setProducts(res.data.slice(0, MAX_ITEMS)))
      .catch(err => console.error(err));
  }, []);

  const handleSearch = (e) => setSearch(e.target.value.toLowerCase());

  const handleSort = (order) => setSortOrder(order);

  const handleFilterChange = (type, value) => {
    setFilters(prev => {
      const newValues = prev[type].includes(value)
        ? prev[type].filter(v => v !== value)
        : [...prev[type], value];
      return { ...prev, [type]: newValues };
    });
  };

  const handleAddToCart = (product) => {
    setCartItems(prev => [...prev, product]);
  };

  // Filtering, Searching, and Sorting
  const filteredProducts = products
    .filter(p => 
      p.product_name.toLowerCase().includes(search) ||
      p.brand_name.toLowerCase().includes(search)
    )
    .filter(p => 
      (filters.color.length === 0 || filters.color.includes(p.color)) &&
      (filters.brand.length === 0 || filters.brand.includes(p.brand_name))
    )
    .sort((a, b) => sortOrder === 'asc' ? a.price - b.price : b.price - a.price);

  const paginatedProducts = filteredProducts.slice(
    (currentPage - 1) * PRODUCTS_PER_PAGE,
    currentPage * PRODUCTS_PER_PAGE
  );

  return (
    <div className="app">
      <h1>üõç Product Catalog</h1>

      <input
        type="text"
        placeholder="Search by name or brand"
        onChange={handleSearch}
      />

      <Filters products={products} filters={filters} onFilterChange={handleFilterChange} />

      <div>
        <label>Sort by Price:</label>
        <select onChange={e => handleSort(e.target.value)}>
          <option value="asc">Low to High</option>
          <option value="desc">High to Low</option>
        </select>
      </div>

      <div className="product-grid">
        {paginatedProducts.map(product => (
          <ProductCard key={product.id} product={product} onAddToCart={handleAddToCart} />
        ))}
      </div>

      <Pagination
        totalItems={filteredProducts.length}
        itemsPerPage={PRODUCTS_PER_PAGE}
        currentPage={currentPage}
        onPageChange={setCurrentPage}
      />

      <Cart items={cartItems} />
    </div>
  );
};

export default App; */
